names(BLOSUM62.diag)
BLOSUM62.diag["E"]
scores
# Chunk 1
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
# Chunk 2: setup
library(compbio4all)
# Chunk 3
library(flextable)
library(webshot)
# Chunk 5
library(Biostrings)
# Chunk 6
data(BLOSUM62)
# Chunk 7
# Chunk 8
# Chunk 9
# Chunk 10
tri_print(BLOSUM62, as.image = T)
# Chunk 11
# Chunk 12
# Chunk 13
# Chunk 14
# Chunk 15
# Chunk 16
diag_show(BLOSUM62)
# Chunk 17
BLOSUM62[1,1]
# Chunk 18
BLOSUM62[c(1:4),c(1:4)]
# Chunk 19
1:4
# Chunk 20
# Chunk 21
c(1:20)
# Chunk 22
c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20)
# Chunk 23
BLOSUM62[1, ]
# Chunk 24
BLOSUM62[ , c(1:20)]
# Chunk 25
BLOSUM62[1 , c(1:20)]
# Chunk 26
i <- c(1:20)
# Chunk 27
# Chunk 28
# Chunk 29
is.vector(i)
# Chunk 30
is.matrix(i)
# Chunk 31
BLOSUM62[i ,i ]
# Chunk 32
BLOSUM62[c(1:20) ,c(1:20)  ]
# Chunk 33
BLOSUM62.subset <-  BLOSUM62[i ,i ]
# Chunk 34
diag(BLOSUM62.subset)
# Chunk 35
n <- colnames(BLOSUM62.subset)
i2 <- sort(n)
# Chunk 36
diag(BLOSUM62.subset)[i2]
# Chunk 37
BLOSUM62.diag <- diag(BLOSUM62.subset)[i2]
# Chunk 38
# Chunk 39
rownames(BLOSUM62.diag)
colnames(BLOSUM62.diag)
names(BLOSUM62.diag)
# Chunk 40
BLOSUM62.diag["E"]
# Chunk 41
BLOSUM62.diag[4]
# Chunk 42
# Chunk 43
# Chunk 44
BLOSUM62.subset["E","E"]
# Chunk 45
# Chunk 46
# Chunk 47
BLOSUM62.subset[7,7]
# Chunk 48
# Chunk 49
BLOSUM62.subset[7, ]
# Chunk 50
BLOSUM62.subset["P","A"]
# Chunk 51
BLOSUM62.subset[15,1]
# Chunk 52
# Chunk 53
BLOSUM62.subset["E","E"]
# Chunk 54
BLOSUM62.subset["P","A"]
# Chunk 55
hShrm3  <- "EPEREPEWRDRPGSP"
mShrm3     <- "EAEREASWSEDRPGT"
# Chunk 56
# Chunk 57
rbind(hShrm3,
mShrm3)
# Chunk 58
# Chunk 59
# Chunk 60
# Chunk 61
hShrm3_alt  <- c("E","P","E","R","E","P","E","W","R","D","R","P","G","S","P")
mShrm3_alt     <- c("E","A","E","R","E","A","S","W","S","E","D","R","P","G","T")
# Chunk 62
# run length()
# run dim()
# Chunk 63
# run is() on hShrm3 AND hShrm3_alt
# run is.vector on hShrm3 AND hShrm3_alt
# do this for the rest of the commands
# Chunk 64
strsplit(hShrm3, split = "")
# Chunk 65
# Chunk 66
# Chunk 67
# Chunk 68
# split up mShrm3 with strsplit()
# unlist it with unlist()
# Chunk 69
hShrm3_vec <- unlist(strsplit(hShrm3, split = ""))
mShrm3_vec <- unlist(strsplit(mShrm3, split = ""))
# Chunk 70
# length of hShrm3_vec
# length of mShrm3_vec
# Chunk 71
rbind(hShrm3_vec, mShrm3_vec)
# Chunk 72
cbind(hShrm3_vec, mShrm3_vec)
# Chunk 73
# Chunk 74
aa1 <- "A"
aa2 <- "A"
aa3 <- "W"
# Chunk 75
# Chunk 76
ifelse(aa1 == aa2, yes =  1, no = 0)
# Chunk 77
aa1 == aa2
# Chunk 78
# Chunk 79
# Chunk 80
seq1 <- c(aa1, aa2, aa3)
seq2 <- c(aa3, aa2, aa1)
# Chunk 81
# Chunk 82
seq1 == seq2
# Chunk 83
identical <- seq1==seq2
# Chunk 84
rbind(seq1, seq2, identical)
# Chunk 85
ifelse(seq1 == seq2, yes = 1, no = 0)
# Chunk 86
align.score <- ifelse(seq1 == seq2, yes = 1, no = 0)
# Chunk 87
# Chunk 88
rbind(seq1, seq2, identical, align.score )
# Chunk 89
# Chunk 90
# Chunk 91
rbind(hShrm3_vec,
mShrm3_vec,
identical = hShrm3_vec == mShrm3_vec,
score= ifelse(hShrm3_vec == mShrm3_vec,yes = 1, no = 0 ))
# Chunk 92
scores <-ifelse(hShrm3_vec == mShrm3_vec,yes = 1, no = 0 )
# Chunk 93
sum(scores)
# Chunk 94
# Chunk 95
5/15
sum(scores)/length(scores)
shrm <- data.frame(shrm, stringsAsFactors = F)
shroom
shrm
rbind(hShrm3_vec,
mShrm3_vec,
identical = hShrm3_vec == mShrm3_vec,
score= ifelse(hShrm3_vec == mShrm3_vec,yes = 1, no = 0 ))
shrm
# Chunk 1
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
# Chunk 2: setup
library(compbio4all)
# Chunk 3
library(flextable)
library(webshot)
# Chunk 5
library(Biostrings)
# Chunk 6
data(BLOSUM62)
# Chunk 7
# Chunk 8
# Chunk 9
# Chunk 10
tri_print(BLOSUM62, as.image = T)
# Chunk 11
# Chunk 12
# Chunk 13
# Chunk 14
# Chunk 15
# Chunk 16
diag_show(BLOSUM62)
# Chunk 17
BLOSUM62[1,1]
# Chunk 18
BLOSUM62[c(1:4),c(1:4)]
# Chunk 19
1:4
# Chunk 20
# Chunk 21
c(1:20)
# Chunk 22
c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20)
# Chunk 23
BLOSUM62[1, ]
# Chunk 24
BLOSUM62[ , c(1:20)]
# Chunk 25
BLOSUM62[1 , c(1:20)]
# Chunk 26
i <- c(1:20)
# Chunk 27
# Chunk 28
# Chunk 29
is.vector(i)
# Chunk 30
is.matrix(i)
# Chunk 31
BLOSUM62[i ,i ]
# Chunk 32
BLOSUM62[c(1:20) ,c(1:20)  ]
# Chunk 33
BLOSUM62.subset <-  BLOSUM62[i ,i ]
# Chunk 34
diag(BLOSUM62.subset)
# Chunk 35
n <- colnames(BLOSUM62.subset)
i2 <- sort(n)
# Chunk 36
diag(BLOSUM62.subset)[i2]
# Chunk 37
BLOSUM62.diag <- diag(BLOSUM62.subset)[i2]
# Chunk 38
# Chunk 39
rownames(BLOSUM62.diag)
colnames(BLOSUM62.diag)
names(BLOSUM62.diag)
# Chunk 40
BLOSUM62.diag["E"]
# Chunk 41
BLOSUM62.diag[4]
# Chunk 42
# Chunk 43
# Chunk 44
BLOSUM62.subset["E","E"]
# Chunk 45
# Chunk 46
# Chunk 47
BLOSUM62.subset[7,7]
# Chunk 48
# Chunk 49
BLOSUM62.subset[7, ]
# Chunk 50
BLOSUM62.subset["P","A"]
# Chunk 51
BLOSUM62.subset[15,1]
# Chunk 52
# Chunk 53
BLOSUM62.subset["E","E"]
# Chunk 54
BLOSUM62.subset["P","A"]
# Chunk 55
hShrm3  <- "EPEREPEWRDRPGSP"
mShrm3     <- "EAEREASWSEDRPGT"
# Chunk 56
# Chunk 57
rbind(hShrm3,
mShrm3)
# Chunk 58
# Chunk 59
# Chunk 60
# Chunk 61
hShrm3_alt  <- c("E","P","E","R","E","P","E","W","R","D","R","P","G","S","P")
mShrm3_alt     <- c("E","A","E","R","E","A","S","W","S","E","D","R","P","G","T")
# Chunk 62
# run length()
# run dim()
# Chunk 63
# run is() on hShrm3 AND hShrm3_alt
# run is.vector on hShrm3 AND hShrm3_alt
# do this for the rest of the commands
# Chunk 64
strsplit(hShrm3, split = "")
# Chunk 65
# Chunk 66
# Chunk 67
# Chunk 68
# split up mShrm3 with strsplit()
# unlist it with unlist()
# Chunk 69
hShrm3_vec <- unlist(strsplit(hShrm3, split = ""))
mShrm3_vec <- unlist(strsplit(mShrm3, split = ""))
# Chunk 70
# length of hShrm3_vec
# length of mShrm3_vec
# Chunk 71
rbind(hShrm3_vec, mShrm3_vec)
# Chunk 72
cbind(hShrm3_vec, mShrm3_vec)
# Chunk 73
cbind(hShrm3_vec, mShrm3_vec)
# Chunk 74
shrm <- cbind(hShrm3_vec, mShrm3_vec)
# Chunk 75
# Chunk 76
aa1 <- "A"
aa2 <- "A"
aa3 <- "W"
# Chunk 77
# Chunk 78
ifelse(aa1 == aa2, yes =  1, no = 0)
# Chunk 79
aa1 == aa2
# Chunk 80
# Chunk 81
# Chunk 82
seq1 <- c(aa1, aa2, aa3)
seq2 <- c(aa3, aa2, aa1)
# Chunk 83
# Chunk 84
seq1 == seq2
# Chunk 85
identical <- seq1==seq2
# Chunk 86
rbind(seq1, seq2, identical)
# Chunk 87
ifelse(seq1 == seq2, yes = 1, no = 0)
# Chunk 88
align.score <- ifelse(seq1 == seq2, yes = 1, no = 0)
# Chunk 89
# Chunk 90
rbind(seq1, seq2, identical, align.score )
# Chunk 91
# Chunk 92
# Chunk 93
rbind(hShrm3_vec,
mShrm3_vec,
identical = hShrm3_vec == mShrm3_vec,
score= ifelse(hShrm3_vec == mShrm3_vec,yes = 1, no = 0 ))
# Chunk 94
scores <-ifelse(hShrm3_vec == mShrm3_vec,yes = 1, no = 0 )
# Chunk 95
sum(scores)
# Chunk 96
# Chunk 97
5/15
# Chunk 98
sum(scores)/length(scores)
# Chunk 99
shrm <- data.frame(shrm, stringsAsFactors = F)
# Chunk 100
summary(shrm)
# Chunk 101
# Chunk 102
# Chunk 103
shrm$hShrm3_vec
# Chunk 104
shrm[, "hShrm3_vec"] == shrm[,"mShrm3_vec"]
# Chunk 105
# Chunk 106
ifelse(shrm[, "hShrm3_vec"] == shrm[,"mShrm3_vec"], yes = 1, no = 0)
# Chunk 107
# Chunk 108
shrm$identical <- ifelse(shrm[, "hShrm3_vec"] == shrm[,"mShrm3_vec"], yes = 1, no = 0)
# Chunk 109
# Chunk 110
shrm
sum(shrm$score)
hShrm3_alt  <- c("E","P","E","R","E","P","E","W","-","R","D","R","P","G","S","P")
score_alignment
usethis::use_package("bio3d",   "Imports")
# Chunk 1
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
# Chunk 2: setup
library(compbio4all)
# Chunk 3
dmshrm <- c("MKMRNHKENGNGSEMGESTKSLAKMEPENNNKISVVSVSKLLLKDSNGANSRSSNSNASFSSASVAGSVQ
DDLPHHNSSSSQLGQQHGSSLDQCGLTQAGLEEYNNRSSSYYDQTAFHHQKQPSYAQSEGYHSYVSSSDS
TSATPFLDKLRQESDLLSRQSHHWSENDLSSVCSNSVAPSPIPLLARQSHSHSHSHAHSHSNSHGHSHGH
AHSASSSSSSNNNSNGSATNNNNNNSSESTSSTETLKWLGSMSDISEASHATGYSAISESVSSSQRIVHS
SRVPTPKRHHSESVLYLHNNEEQGDSSPTASNSSQMMISEEANGEESPPSVQPLRIQHRHSPSYPPVHTS
MVLHHFQQQQQQQQDYQHPSRHHTNQSTLSTQSSLLELASPTEKPRSLMGQSHSMGDLQQKNPHQNPMLG
RSAGQQHKSSISVTISSSEAVVTIAPQPPAGKPSKLQLSLGKSEALSCSTPNMGEQSPTNSIDSYRSNHR
LFPVSTYTEPVHSNTSQYVQHPKPQFSSGLHKSAKLPVITPAGATVQPTWHSVAERINDFERSQLGEPPK
FAYLEPTKTHRLSNPALKALQKNAVQSYVERQQQQQKEEQQLLRPHSQSYQACHVERKSLPNNLSPIMVG
LPTGSNSASTRDCSSPTPPPPPRRSGSLLPNLLRRSSSASDYAEFRELHQAQGQVKGPSIRNISNAEKIS
FNDCGMPPPPPPPRGRLAVPTRRTSSATEYAPMRDKLLLQQAAALAHQQHHPQQHRHAQPPHVPPERPPK
HPNLRVPSPELPPPPQSELDISYTFDEPLPPPPPPEVLQPRPPPSPNRRNCFAGASTRRTTYEAPPPTAI
VAAKVPPLVPKKPTSLQHKHLANGGGGSRKRPHHATPQPILENVASPVAPPPPLLPRARSTAHDNVIASN
LESNQQKRSNSKASYLPRQSLEKLNNTDPDHGIYKLTLTSNEDLVAHTKPSYGVTGKLPNNLPDVLPLGV
KLHQQPKLQPGSPNGDANVTLRYGSNNNLTGNSPTVAPPPYYGGGQRYSTPVLGQGYGKSSKPVTPQQYT
RSQSYDVKHTSAVTMPTMSQSHVDLKQAAHDLETTLEEVLPTATPTPTPTPTPTPPRLSPASSHSDCSLS
TSSLECTINPIATPIPKPEAHIFRAEVISTTLNTNPLTTPPKPAMNRQESLRENIEKITQLQSVLMSAHL
CDASLLGGYTTPLITSPTASFANEPLMTPPLPPSPPPPLEPEEEEEQEENDVHDKQPEIEELQLMQRSEL
VLMVNPKPSTTDMACQTDELEDRDTDLEAAREEHQTRTTLQPRQRQPIELDYEQMSRELVKLLPPGDKIA
DILTPKICKPTSQYVSNLYNPDVPLRLAKRDVGTSTLMRMKSITSSAEIRVVSVELQLAEPSEEPTNLIK
QKMDELIKHLNQKIVSLKREQQTISEECSANDRLGQDLFAKLAEKVRPSEASKFRTHVDAVGNITSLLLS
LSERLAQTESSLETRQQERGALESKRDLLYEQMEEAQRLKSDIERRGVSIAGLLAKNLSADMCADYDYFI
NMKAKLIADARDLAVRIKGSEEQLSSLSDALVQSDC")
# Chunk 4
dmshrm
# Chunk 5
length(dmshrm)
# Chunk 6
nchar(dmshrm)
# Chunk 7
dmshrm <- gsub("\n", "", dmshrm)
# Chunk 8
nchar(dmshrm)
# Chunk 9
gsub("I", "¯\\_(ツ)_/¯", dmshrm)
# Chunk 10
dmshrm.actin <- substr(dmshrm, start = 445, stop =920)
# Chunk 11
nchar(dmshrm.actin)
# Chunk 12
is(dmshrm.actin)
# Chunk 13
dmshrm.actin2 <- strsplit(dmshrm.actin,"")
# Chunk 14
is(dmshrm.actin2)
# Chunk 15
length(dmshrm.actin2)
# Chunk 16
dmshrm.actin2 <- dmshrm.actin2[[1]]
# Chunk 17
length(dmshrm.actin2)
# Chunk 18
is(dmshrm.actin2)
# Chunk 19
table(dmshrm.actin2)
# Chunk 20
my.table <- table(dmshrm.actin2)
# Chunk 21
is(my.table)
# Chunk 22
plot(my.table)
# Chunk 23
i<- order(my.table)
plot(my.table[i])
# Chunk 24
#reverse the index
i.rev <- rev(i)
#reverse the vector
## (this might be hard to understand; no worries)
my.table.rev <- my.table[i.rev]
#plot it
plot(my.table.rev)
# install.packages("bio3d")
library(bio3d)
dmshrm.blast.1 <- blast.pdb(dmshrm.actin)
dmshrm.blast.2 <- blastr(dmshrm.actin)
Laurasiatherian
library(phangorn)
Laurasiatherian
data(Laurasiatherian)
library(phangorn)
data(Laurasiatherian)
DNA.dat <- rbind(as.character(Laurasiatherian$Platypus),
as.character(Laurasiatherian$Armadillo),
as.character(Laurasiatherian$Alpaca),
as.character( Laurasiatherian$Vole))
DNA.dat <- gsub("1","A",DNA.dat)
DNA.dat <- gsub("2","T",DNA.dat)
DNA.dat <- gsub("3","C",DNA.dat)
DNA.dat <- gsub("4","G",DNA.dat)
usethis::use_package("phangorn",   "Imports")
library(compbio4all)
blast.pdb
?blast.pdb
aa_chars_subset
# Chunk 1
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
# Chunk 2: setup
library(compbio4all)
# Chunk 3
library(ggplot2)
library(ggpubr)
# Chunk 4
data(aa_chars_subset)
aa  <-  aa_chars_subset
aa
aa
library(compbio4all)
