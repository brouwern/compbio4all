orfstops[k]
orfstops
k
source('~/Box Sync/0_R/compbio4all/R/find_ORFs_in_seq.R')
source('~/Box Sync/0_R/compbio4all/R/find_ORFs_in_seq.R')
source('~/Box Sync/0_R/compbio4all/R/find_ORFs_in_seq.R')
find_ORFs_in_seq(dengueseqstartstring)
source('~/Box Sync/0_R/compbio4all/R/find_ORFs_in_seq.R')
find_ORFs_in_seq(dengueseqstartstring)
source('~/Box Sync/0_R/compbio4all/R/find_ORFs_in_seq.R')
source('~/Box Sync/0_R/compbio4all/R/find_ORFs_in_seq.R')
find_ORFs_in_seq(dengueseqstartstring)
s1 <- "aaaatgcagtaacccatgccc"
find_ORFs_in_seq(s1)
data(dengueseqstartstring)
find_ORFs_in_seq(dengueseqstartstring)
source('~/Box Sync/0_R/compbio4all/R/find_ORFs_in_seq.R')
s1 <- "aaaatgcagtaacccatgccc"
plot_ORFs_in_seq(s1)
source('~/Box Sync/0_R/compbio4all/R/find_ORFs_in_seq.R')
#' Find and plot potential ORFs
#'
#' By Coghlan (2011) A little book of R for bioinformatics.  https://a-little-book-of-r-for-bioinformatics.readthedocs.io/en/latest/.
#' This function calls find_start_stop_ORFs() thenm builds a plot of the output.
#' Predictions are based on the standard genetic code.
#'
#' @param sq DNA sequence
#'
#' @examples
#' # From Coglan 2011
#' ## Toy example
#' s1 <- "aaaatgcagtaacccatgccc"
#' plot_ORFs_in_seq(s1)
#'
#' ## Dengue virus example
#' data(dengueseqstartstring)
#' find_ORFs_in_seq(dengueseqstartstring)
#'
#'
#' @export
plot_ORFs_in_seq <- function(sq)
{
# Make vectors "positions" and "types"
## containing information on the positions of ATGs in the sequence:
# mylist <- find_start_stop_codons(sequence)
# positions <- mylist[[1]]
# types <- mylist[[2]]
# # Initialize vectors "orfstarts" and "orfstops"
# ## to store the predicted start and stop codons of ORFs
# orfstarts <- numeric()
# orfstops <- numeric()
#
# # Make a vector "orflengths"
# ## to store the lengths of the ORFs
# orflengths <- numeric()
#
# # Print out the positions of ORFs in the sequence:
# numpositions <- length(positions) # Find the length of vector "positions"
#
# # There must be at least one start codon and one stop codon to have an ORF.
# if (numpositions >= 2)
# {
#   for (i in 1:c(numpositions-1))
#   {
#     posi <- positions[i]
#     typei <- types[i]
#     found <- 0
#     while (found == 0)
#     {
#       for (j in c(i+1):numpositions)
#       {
#         posj <- positions[j]
#         typej <- types[j]
#         posdiff <- posj - posi
#         posdiffmod3 <- posdiff %% 3
#         orflength <- posj - posi + 3 # Add in the length of the stop codon
#         if (typei == "atg" && (typej == "taa" || typej == "tag" || typej == "tga") && posdiffmod3 == 0)
#         {
#           # Check if we have already used the stop codon at posj+2 in an ORF
#           numorfs <- length(orfstops)
#           usedstop <- -1
#           if (numorfs == 0)
#           {
#             for (k in 1:numorfs)
#             {
#               orfstopk <- orfstops[k]
#               #browser()
#               if(orfstopk == c(posj + 2)) {
#                 usedstop <- 1
#                 }
#             }
#           }
#           if (usedstop == -1)
#           {
#             orfstarts  <- append(orfstarts, posi, after=length(orfstarts))
#             orfstops   <- append(orfstops, posj+2, after=length(orfstops)) # Including the stop codon.
#             orflengths <- append(orflengths, orflength, after=length(orflengths))
#           }
#           found <- 1
#           break
#         }
#         if (j == numpositions) {
#           found <- 1
#           }
#       }
#     }
#   }
# }
#
# Return list of ORFs
## $orfstarts
## $orfstops
## $orflengths
mylist <- find_ORFs_in_seq(sq)
# Sort the final ORFs by start position:
indices <- order(mylist$orfstarts)
orfstarts <- mylist$orfstarts[indices]
orfstops <- orfstops[indices]
# Plot
## Make a plot showing the positions of ORFs in the input sequence:
## Draw a line at y=0 from 1 to the length of the sequence:
x <- c(1,nchar(sq))
y <- c(0,0)
plot(x, y, ylim=c(0,3), type="l", axes=FALSE,
xlab="Nucleotide", ylab="Reading frame",
main="Predicted ORFs")
graphics::segments(1,1,nchar(sq),1)
graphics::segments(1,2,nchar(sq),2)
# Add the x-axis at y=0:
graphics::axis(1, pos=0)
# Add the y-axis labels:
graphics::text(0.9,0.5,"+1")
graphics::text(0.9,1.5,"+2")
graphics::text(0.9,2.5,"+3")
# Make a plot of the ORFs in the sequence:
numorfs <- length(orfstarts)
for (i in 1:numorfs)
{
orfstart <- orfstarts[i]
orfstop <- orfstops[i]
remainder <- (orfstart-1) %% 3
if    (remainder == 0) # +1 reading frame
{
graphics::rect(orfstart,0,orfstop,1,col="cyan",border="black")
}
else if (remainder == 1)
{
graphics::rect(orfstart,1,orfstop,2,col="cyan",border="black")
}
else if (remainder == 2)
{
graphics::rect(orfstart,2,orfstop,3,col="cyan",border="black")
}
}
}
#' Find potential open reading frames (ORFs) in a DNA sequence.
#'
#' By Coghlan (2011) A little book of R for bioinformatics.  https://a-little-book-of-r-for-bioinformatics.readthedocs.io/en/latest/.
#' Originally called findORFsinSeq()
#'
#' @param sq Input sequence
#'
#' @examples
#'
#' # From Coglan 2011
#' ## Toy example
#' s1 <- "aaaatgcagtaacccatgccc"
#' find_ORFs_in_seq(s1)
#'
#' ## Dengue virus example
#' data(dengueseqstartstring)
#' find_ORFs_in_seq(dengueseqstartstring)
#'
#' @export
find_ORFs_in_seq <- function(sq)
{
# Make vectors "positions" and "types" containing information on the positions of ATGs
## in the sequence:
## call find_start_stop_ORFs()
mylist <- find_start_stop_codons(sq)
positions <- mylist$positions
types <- mylist$types
# Initailize vectors "orfstarts" and "orfstops"
## to store the predicted start and stop codons of ORFs
orfstarts <- numeric()
orfstops <- numeric()
# Make a vector "orflengths" to store the lengths of the ORFs
orflengths <- numeric()
# Print out the positions of ORFs in the sequence:
# Find the length of vector "positions"
numpositions <- length(positions)
# There must be at least one start codon and one stop codon to have an ORF.
if (numpositions >= 2)
{
for (i in 1:(numpositions-1))
{
posi <- positions[i]
typei <- types[i]
found <- 0
while (found == 0)
{
for (j in c(i+1):numpositions)
{
posj  <- positions[j]
typej <- types[j]
posdiff <- posj - posi
## NOTE: %% is the modulo operation
### Wikipedia: "In computing, the modulo operation returns the remainder or signed remainder of a division,
###             after one number is divided by another (called the modulus of the operation).
### Here is used in relation to the fact that all codons have 3 bases on them
posdiffmod3 <- posdiff %% 3
# Add in the length of the stop codon
orflength <- posj - posi + 3
if (typei == "atg" && (typej == "taa" || typej == "tag" || typej == "tga") && posdiffmod3 == 0)
{
# Check if we have already used the stop codon at posj+2 in an ORF
numorfs <- length(orfstops)
# set usedstop parameter to -1
usedstop <- -1
if (numorfs > 0)
{
for (k in 1:numorfs)
{
# orfstops initialized as empty vector above
orfstopk <- orfstops[k]
if(orfstopk == c(posj + 2)){
# set usedstop parameter to +1
usedstop <- 1
}
}
}
if (usedstop == -1)
{
orfstarts  <- append(orfstarts,
posi,
after=length(orfstarts))
orfstops   <- append(orfstops,
c(posj+2),
after=length(orfstops)) # Including the stop codon.
orflengths <- append(orflengths,
orflength,
after=length(orflengths))
}
found <- 1
break
}
if (j == numpositions) {
found <- 1
}
}
}
}
}
# Sort the final ORFs by start position:
indices <- order(orfstarts)
orfstarts <- orfstarts[indices]
orfstops <- orfstops[indices]
# Find the lengths of the ORFs that we have
orflengths <- numeric()
numorfs <- length(orfstarts)
for (i in 1:numorfs)
{
orfstart <- orfstarts[i]
orfstop <- orfstops[i]
orflength <- orfstop - orfstart + 1
orflengths <- append(orflengths,orflength,after=length(orflengths))
}
mylist <- list(orfstarts = orfstarts,
orfstops = orfstops,
orflengths = orflengths)
return(mylist)
}
#' plot_potential_starts_and_stops
#'
#' From Coghlan (2011) A little book of R for bioinformatics.
#' https://a-little-book-of-r-for-bioinformatics.readthedocs.io/en/latest/src/chapter7.html
#' Function original named plotPotentialStartsAndStops()
#'
#' @param sq sequence to analyze and plot
#'
#' @examples
#'
#' # Toy Example sequence from Coghlan 2011
#' s1 <- "aaaatgcagtaacccatgccc"
#' plot_start_stop_codons(s1)
#'
#' # Dengue virus example from Coghlan 2011
#' data(dengueseqstartstring)
#' plot_start_stop_codons(dengueseqstartstring)
#'
#' @export
plot_start_stop_codons <- function(sq)
{
# Find start and stop codons
## returns list
## $positions
## $types
starts_stops_list <- find_start_stop_codons(sq)
#-- This should all be the same code as find_stat_stop_codons() --#
# # Define a vector with the sequences of potential start and stop codons
# codons <- c("atg", "taa", "tag", "tga")
# # Find the number of occurrences of each type of potential start or stop codon
# for (i in 1:4)
# {
#   codon <- codons[i]
#   # Find all occurrences of codon "codon" in sequence "sq"
#   occurrences <- matchPattern(codon, sq)
#   # Find the start positions of all occurrences of "codon" in sequence "sq"
#   codonpositions <- occurrences@ranges@start
#   # Find the total number of potential start and stop codons in sequence "sq"
#   numoccurrences <- length(codonpositions)
#   if (i == 1)
#   {
#     # Make a copy of vector "codonpositions" called "positions"
#     positions   <- codonpositions
#     # Make a vector "types" containing "numoccurrences" copies of "codon"
#     types       <- rep(codon, numoccurrences)
#   }
#   else
#   {
#     # Add the vector "codonpositions" to the end of vector "positions":
#     positions   <- append(positions, codonpositions, after=length(positions))
#     # Add the vector "rep(codon, numoccurrences)" to the end of vector "types":
#     types       <- append(types, rep(codon, numoccurrences), after=length(types))
#   }
# }
# Sort the vectors "positions" and "types" in order of position along the input sequence:
indices     <- order(starts_stops_list$positions)
positions   <- starts_stops_list$positions[indices]
types       <-starts_stops_list$types[indices]
cat("This may take a second...")
# Make a plot showing the positions of the start and stop codons in the input sequence:
# Draw a line at y=0 from 1 to the length of the sequence:
x  <- c(1,nchar(sq))
y <- c(0,0)
plot(x, y, ylim=c(0,3), type="l", axes=FALSE, xlab="Nucleotide", ylab="Reading frame",
main="Predicted start (red) and stop (blue) codons")
segments(1,1,nchar(sq),1)
segments(1,2,nchar(sq),2)
# Add the x-axis at y=0:
axis(1, pos=0)
# Add the y-axis labels:
text(0.9,0.5,"+1")
text(0.9,1.5,"+2")
text(0.9,2.5,"+3")
# Draw in each predicted start/stop codon:
numcodons <- length(positions)
for (i in 1:numcodons)
{
position <- positions[i]
type <- types[i]
remainder <- (position-1) %% 3
if    (remainder == 0) # +1 reading frame
{
if (type == "atg") { segments(position,0,position,1,lwd=1,col="red") }
else               { segments(position,0,position,1,lwd=1,col="blue")}
}
else if (remainder == 1)
{
if (type == "atg") { segments(position,1,position,2,lwd=1,col="red") }
else               { segments(position,1,position,2,lwd=1,col="blue")}
}
else if (remainder == 2)
{
if (type == "atg") { segments(position,2,position,3,lwd=1,col="red") }
else               { segments(position,2,position,3,lwd=1,col="blue")}
}
}
}
plot_ORFs_in_seq(s1)
source('~/Box Sync/0_R/compbio4all/R/plot_ORFs_in_seq.R')
plot_ORFs_in_seq(s1)
plot_ORFs_in_seq(s1)
data(dengueseqstartstring)
find_ORFs_in_seq(dengueseqstartstring)
plot_ORFs_in_seq(dengueseqstartstring)
source('~/Box Sync/0_R/compbio4all/R/plot_ORFs_in_seq.R')
source('~/Box Sync/0_R/compbio4all/R/find_start_stop_codons.R')
source('~/Box Sync/0_R/compbio4all/R/plot_potential_starts_and_stops.R')
library(compbio4all)
?segments
source('~/Box Sync/0_R/compbio4all/R/plot_potential_starts_and_stops.R')
source('~/Box Sync/0_R/compbio4all/R/plot_potential_starts_and_stops.R')
library(compbio4all)
source('~/Box Sync/0_R/compbio4all/R/plot_starts_and_stops.R')
?nj
source('~/Box Sync/0_R/compbio4all/R/nj_from_msa_unrooted.R')
data(virusaln_seqinr)
nj_from_msa_unrooted(alignmentmat, type = "DNA)
nj_from_msa_unrooted(alignmentmat, type = "DNA)
)
nj_from_msa_unrooted(alignmentmat, type = "DNA")
virusaln_seqinr
nj_from_msa_unrooted(virusaln_seqinr, type = "DNA")
data(virusaln_seqinr_clean)
virusaln_seqinr_clean
nj_from_msa_unrooted(virusaln_seqinr, type = "DNA")
nj_from_msa_unrooted(virusaln_seqinr, type = "protein")
virusaln_seqinr_clean
ape::as.alignment(virusaln_seqinr_clean)
data(virusaln_seqinr_clean)
virusaln_seqinr_clean
?virusaln_seqinr_clean
?virusaln_seqinr_clean
virusaln_seqinr_clean
ape::as.alignment(virusaln_seqinr_clean)
nj_from_msa_unrooted(virusaln_seqinr, type = "protein")
debugonce(nj_from_msa_unrooted)
nj_from_msa_unrooted(virusaln_seqinr, type = "protein")
mydist
alignment
seqinr::dist.alignment(alignment)
alignmentmat
ape::as.alignment(alignmentmat)
virusaln_seqinr_clean
ape::as.alignment(virusaln_seqinr_clean)
virusaln_seqinr_clean
ape::as.alignment(alignmentmat)
source('~/Box Sync/0_R/compbio4all/R/nj_from_msa_unrooted.R')
source('~/Box Sync/0_R/compbio4all/R/nj_from_msa_unrooted.R')
nj_from_msa_unrooted(virusaln_seqinr, type = "protein")
source('~/Box Sync/0_R/compbio4all/R/nj_from_msa_unrooted.R')
ape::as.alignment(virusaln_seqinr_clean)
nj_from_msa_unrooted(virusaln_seqinr, type = "protein")
source('~/Box Sync/0_R/compbio4all/R/nj_from_msa_unrooted.R')
source('~/Box Sync/0_R/compbio4all/R/nj_from_msa_unrooted.R')
nj_from_msa_unrooted(virusaln_seqinr, type = "protein")
source('~/Box Sync/0_R/compbio4all/R/nj_from_msa_unrooted.R')
nj_from_msa_unrooted(virusaln_seqinr, type = "protein")
nj_tree <- nj_from_msa_unrooted(virusaln_seqinr, type = "protein")
plot(nj_tree)
plot(nj_tree)
data(virusaln_seqinr_clean)
ape::as.alignment(virusaln_seqinr_clean)
nj_tree <- nj_from_msa_unrooted(virusaln_seqinr, type = "protein")
plot(nj_tree)
nj_tree <- nj_from_msa_unrooted(virusaln_seqinr, type = "protein")
nj_tree
nj_tree <- nj_from_msa_unrooted(virusaln_seqinr, type = "protein")
ape::plot.phylo(nj_tree)
nj_tree <- nj_from_msa_unrooted(virusaln_seqinr, type = "protein")
nj_tree
ape::plot.phylo(nj_tree, type = "u")
nj_tree <- nj_from_msa_unrooted(virusaln_seqinr, type = "protein")
nj_tree
data(virusaln_seqinr_clean)
nj_tree <- nj_from_msa_unrooted(virusaln_seqinr, type = "protein")
nj_tree
ape::plot.phylo(nj_tree, type = "u")
source('~/Box Sync/0_R/compbio4all/R/nj_from_msa_unrooted.R')
source('~/Box Sync/0_R/compbio4all/R/nj_from_msa_unrooted.R')
nj_tree <- nj_from_msa_unrooted(virusaln_seqinr, type = "protein")
nj_tree <- nj_from_msa_unrooted(virusaln_seqinr_clean, type = "protein")
debugonce(nj_from_msa_unrooted)
nj_tree <- nj_from_msa_unrooted(virusaln_seqinr_clean, type = "protein")
mymat
alignment
source('~/Box Sync/0_R/compbio4all/R/nj_from_msa_unrooted.R')
debugonce(nj_from_msa_unrooted)
virusaln_seqinr_clean
nj_tree <- nj_from_msa_unrooted(virusaln_seqinr_clean, type = "protein")
source('~/Box Sync/0_R/compbio4all/R/nj_from_msa_unrooted.R')
nj_tree <- nj_from_msa_unrooted(virusaln_seqinr_clean, type = "protein")
debugonce(nj_from_msa_unrooted)
nj_tree <- nj_from_msa_unrooted(virusaln_seqinr_clean, type = "protein")
mymat
source('~/Box Sync/0_R/compbio4all/R/nj_from_msa_unrooted.R')
nj_tree <- nj_from_msa_unrooted(virusaln_seqinr_clean, type = "protein")
ape::plot.phylo(nj_tree, type = "u")
nj_tree
virusaln_seqinr_clean
debugonce(nj_from_msa_unrooted)
debugonce(nj_from_msa_unrooted)
install.packages("ggpubr")
install.packages("pander")
install.packages("reshape2")
install.packages("GGally")
devtools::load_all(".")
library(compbio4all)
install.packages("biomaRt")
library("devtools")
install_github("biomaRt")
install_github("grimbough/biomaRt")
library(compbio4all)
BiocManager::install("msa")
?plot
install.packages("gplots")
install.packages("iNEXT")
install.packages("evd")
install.packages("HistData")
install.packages("flextable")
install.packages("bio3d")
install.packages("scatterplot3d")
library(compbio4all)
library(compbio4all)
library(compbio4all)
?make_my_data2L
make_my_data2L
library(compbio4all)
library(compbio4all)
library(compbio4all)
library(compbio4all)
devtools::clean_vignettes()
devtools::build_vignettes()
devtools::document(roclets=c('rd', 'collate', 'namespace'))
devtools::load_all(".")
devtools::check()
pkgdown::clean_site (pkg = ".")
pkgdown::build_site()
library(compbio4all)
library(compbio4all)
pkgdown::build_site()
