for(i in 1:23){
x <- paste("CHR_ALT_CTG",i,"_",sep = "")
genes_dpc$chromosome[grep(x,genes_dpc$chromosome)] <- i
}
summary(factor(genes_dpc$chromosome))
for(i in 1:25){
x <- paste("CHR_ALT_CTG",i,"_",sep = "")
genes_dpc$chromosome[grep(x,genes_dpc$chromosome)] <- i
}
summary(factor(genes_dpc$chromosome))
genes_hpc$chromosome[grep("KN",genes_hpc$chromosome)] <- NA
summary(factor(genes_dpc$chromosome))
genes_dpc$chromosome[grep("KN",genes_dpc$chromosome)] <- NA
summary(factor(genes_dpc$chromosome))
genes_dpc$chromosome[grep("KZ",genes_dpc$chromosome)] <- NA
summary(factor(genes_dpc$chromosome))
# save
usethis::use_data(genes_dpc, overwrite = TRUE)
compbio4all::make_dateset_helpfile(dataset = genes_dpc,
dataset_name = "genes_dpc")
library(compbio4all)
?dengueseq_fasta
seqnames <- c("P06747",
"P0C569",
"O56773",
"Q5VKP1")
entrez_fetch_list <- function(db, id, rettype, ...){
#setup list for storing output
n.seq <- length(id)
list.output <- as.list(rep(NA, n.seq))
names(list.output) <- id
# get output
for(i in 1:length(id)){
list.output[[i]] <- rentrez::entrez_fetch(db = db,
id = id[i],
rettype = rettype)
}
return(list.output)
}
seq_1_2_3_4 <- compbio4all::entrez_fetch_list(db = "protein",
id = seqnames,
rettype = "fasta")
seq_1_2_3_4 <- entrez_fetch_list(db = "protein",
id = seqnames,
rettype = "fasta")
seq_1_2_3_4[[1]] <- fasta_cleaner(seq_1_2_3_4[[1]])
seq_1_2_3_4[[2]] <- fasta_cleaner(seq_1_2_3_4[[2]])
seq_1_2_3_4[[3]] <- fasta_cleaner(seq_1_2_3_4[[3]])
seq_1_2_3_4[[4]] <- fasta_cleaner(seq_1_2_3_4[[4]])
fasta_cleaner
seq_1_2_3_4[[1]] <- compbio4all::fasta_cleaner(seq_1_2_3_4[[1]])
seq_1_2_3_4[[2]] <- compbio4all::fasta_cleaner(seq_1_2_3_4[[2]])
seq_1_2_3_4[[3]] <- compbio4all::fasta_cleaner(seq_1_2_3_4[[3]])
seq_1_2_3_4[[4]] <- compbio4all::fasta_cleaner(seq_1_2_3_4[[4]])
## NOTE: MUST be named in order for ggmsa to work!!!
seq_1_2_3_4 <- c(P06747 = paste(seq_1_2_3_4[[1]], collapse = ""),
P0C569 = paste(seq_1_2_3_4[[2]], collapse = ""),
O56773 = paste(seq_1_2_3_4[[3]], collapse = ""),
Q5VKP1 = paste(seq_1_2_3_4[[3]], collapse = ""))
# convert to AAStringSet
seq_1_2_3_4_stringset <- Biostrings::AAStringSet(seq_1_2_3_4)
seq_1_2_3_4
usethis::use_data(seq_1_2_3_4, overwrite = TRUE)
## made dengue-related MSA sequence files
# sequence accessions
seqnames <- c("P06747",
"P0C569",
"O56773",
"Q5VKP1")
# get sequences
seq_1_2_3_4 <- compbio4all::entrez_fetch_list(db = "protein",
id = seqnames,
rettype = "fasta")
# clean sequences
seq_1_2_3_4[[1]] <- compbio4all::fasta_cleaner(seq_1_2_3_4[[1]])
seq_1_2_3_4[[2]] <- compbio4all::fasta_cleaner(seq_1_2_3_4[[2]])
seq_1_2_3_4[[3]] <- compbio4all::fasta_cleaner(seq_1_2_3_4[[3]])
seq_1_2_3_4[[4]] <- compbio4all::fasta_cleaner(seq_1_2_3_4[[4]])
# name the sequences
## NOTE: MUST be named in order for ggmsa to work!!!
seq_1_2_3_4 <- c(P06747 = paste(seq_1_2_3_4[[1]], collapse = ""),
P0C569 = paste(seq_1_2_3_4[[2]], collapse = ""),
O56773 = paste(seq_1_2_3_4[[3]], collapse = ""),
Q5VKP1 = paste(seq_1_2_3_4[[3]], collapse = ""))
# convert to AAStringSet
seq_1_2_3_4_stringset <- Biostrings::AAStringSet(seq_1_2_3_4)
usethis::use_data(seq_1_2_3_4, overwrite = TRUE)
usethis::use_data(seq_1_2_3_4_stringset, overwrite = TRUE)
## made dengue-related MSA sequence files
# sequence accessions
seqnames <- c("P06747",
"P0C569",
"O56773",
"Q5VKP1")
# get sequences
seq_1_2_3_4 <- entrez_fetch_list(db = "protein",
id = seqnames,
rettype = "fasta")
# clean sequences
seq_1_2_3_4[[1]] <- compbio4all::fasta_cleaner(seq_1_2_3_4[[1]])
seq_1_2_3_4[[2]] <- compbio4all::fasta_cleaner(seq_1_2_3_4[[2]])
seq_1_2_3_4[[3]] <- compbio4all::fasta_cleaner(seq_1_2_3_4[[3]])
seq_1_2_3_4[[4]] <- compbio4all::fasta_cleaner(seq_1_2_3_4[[4]])
# name the sequences
## NOTE: MUST be named in order for ggmsa to work!!!
seq_1_2_3_4 <- c(P06747 = paste(seq_1_2_3_4[[1]], collapse = ""),
P0C569 = paste(seq_1_2_3_4[[2]], collapse = ""),
O56773 = paste(seq_1_2_3_4[[3]], collapse = ""),
Q5VKP1 = paste(seq_1_2_3_4[[3]], collapse = ""))
# convert to AAStringSet
seq_1_2_3_4_stringset <- Biostrings::AAStringSet(seq_1_2_3_4)
usethis::use_data(seq_1_2_3_4, overwrite = TRUE)
usethis::use_data(seq_1_2_3_4_stringset, overwrite = TRUE)
library(compbio4all)
devtools::clean_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::document(roclets=c('rd', 'collate', 'namespace'))
library(compbio4all)
devtools::clean_vignettes()
devtools::build_vignettes()
devtools::document(roclets=c('rd', 'collate', 'namespace'))
devtools::document(roclets=c('rd', 'collate', 'namespace'))
rm(list = c("entrez_fetch_list"))
devtools::document(roclets=c('rd', 'collate', 'namespace'))
devtools::load_all(".")
devtools::build_vignettes()
?Biostring
?Biostrings
library(Biostrings)
?Biostrings
?countPattern
lettersprinted
# Chunk 1
# new packages
## Only install once
# install.packages("ggmsa")
# other packages
library(compbio4all)
library(Biostrings)  # convert FASTA to AAStringSet
library(msa)         # multiple sequence alignment
library(ggmsa)       # visualize MSA
# library(rentrez)
# library(seqinr)
# library(ape)
# Chunk 2
seq_1_2_3_4_stringset <- Biostrings::AAStringSet(seq_1_2_3_4)
# Chunk 3
seq_1_2_3_4_stringset
# Chunk 4
virusaln <- msa(inputSeqs = seq_1_2_3_4_stringset,
method = "ClustalW")
# Chunk 5
virusaln
# Chunk 6
is(virusaln)
class(virusaln)
# Chunk 7
class(virusaln) <- "AAMultipleAlignment"
# Chunk 8
virusaln_seqinr <- msaConvert(virusaln, type = "seqinr::alignment")
virusaln_seqinr
seq_1_2_3_4
?seq_1_2_3_4
seq_1_2_3_4
virusaln_seqinr <- msaConvert(virusaln, type = "seqinr::alignment")
print_msa(alignment = virusaln_seqinr,
chunksize = 60)
debugonce(print_msa)
print_msa(alignment = virusaln_seqinr,
chunksize = 60)
chunkseqjaln
#' Print multiple sequence alignment (MSA) to R console
#'
#' From Coglan (2011) A little book of R for bioinformatics.
#' https://a-little-book-of-r-for-bioinformatics.readthedocs.io/en/latest/#
#' (Originally called printMsa)
#'
#' @param alignment Alignment object
#' @param chunksize width of alignment to output
#'
#' @export
print_msa <- function(alignment, chunksize=60)
{
# this function originally required the Biostrings package
# require("Biostrings")
# find the number of sequences in the alignment
numseqs <- alignment$nb
# find the length of the alignment
alignmentlen <- nchar(alignment$seq[[1]])
starts <- seq(1, alignmentlen, by=chunksize)
n <- length(starts)
# get the alignment for each of the sequences:
aln <- vector()
lettersprinted <- vector()
for (j in 1:numseqs)
{
alignmentj <- alignment$seq[[j]]
aln[j] <- alignmentj
lettersprinted[j] <- 0
}
# print out the alignment in blocks of 'chunksize' columns:
for (i in 1:n) { # for each of n chunks
for (j in 1:numseqs)
{
alnj <- aln[j]
chunkseqjaln <- substring(alnj, starts[i], starts[i]+chunksize-1)
chunkseqjaln <- toupper(chunkseqjaln)
# Find out how many gaps there are in chunkseqjaln:
## Original using Biostrings
### gapsj <- Biostrings::countPattern("-",chunkseqjaln) # countPattern() is from Biostrings package
### new using stringr
gapsj <- stringr::str_count(chunkseqjaln, pattern = "")
# Calculate how many residues of the first sequence we have printed so far in the alignment:
lettersprinted[j] <- lettersprinted[j] + chunksize - gapsj
print(paste(chunkseqjaln,lettersprinted[j]))
}
print(paste(' '))
}
}
print_msa(alignment = virusaln_seqinr,
chunksize = 60)
library(devtools)
devtools::clean_vignettes()
devtools::build_vignettes()
install.packages("devtools")
install.packages("devtools")
devtools::build_vignettes()
devtools::document(roclets=c('rd', 'collate', 'namespace'))
devtools::load_all(".")
devtools::check()
library(compbio4all)
library(compbio4all)
file. <- here::here("data-raw","virus_mutation_rates_snr.csv")
virus_snr <- read.csv(file = file.,
skip = 2,
na.strings = "-")
virus_snr$mutation_rate <- gsub("E","e",
virus_snr$mutation_rate)
virus_snr$mutation_rate <- gsub(" ","",virus_snr$mutation_rate )
virus_snr$mutation_rate <- as.numeric(virus_snr$mutation_rate )
summary(virus_snr$mutation_rate )
usethis::use_data(virus_snr, overwrite = TRUE)
compbio4all::make_dateset_helpfile(dataset = virus_snr,
dataset_name = "virus_snr")
virus_snr$mutation_rate_log <- log(virus_snr$mutation_rate)
virus_snr$genome_size_kb_log <- log(virus_snr$genome_size_kb)
ggscatter(y = "mutation_rate_log",
x = "genome_size_kb_log",
data = virus_snr,
color = "group")
virus_snr$mutation_rate_log <- log(virus_snr$mutation_rate)
virus_snr$genome_size_kb_log <- log(virus_snr$genome_size_kb)
ggpubr::ggscatter(y = "mutation_rate_log",
x = "genome_size_kb_log",
data = virus_snr,
color = "group")
compbio4all::make_dateset_helpfile(dataset = virus_snr,
dataset_name = "virus_snr")
file. <- here::here("data-raw","virus_mutation_rates_snr.csv")
virus_snr <- read.csv(file = file.,
skip = 2,
na.strings = "-")
virus_snr$mutation_rate <- gsub("E","e",
virus_snr$mutation_rate)
virus_snr$mutation_rate <- gsub(" ","",virus_snr$mutation_rate )
virus_snr$mutation_rate <- as.numeric(virus_snr$mutation_rate )
summary(virus_snr$mutation_rate )
usethis::use_data(virus_snr, overwrite = TRUE)
compbio4all::make_dateset_helpfile(dataset = virus_snr,
dataset_name = "virus_snr")
file. <- here::here("data-raw","virus_mutation_rates_snc.csv")
virus_snc <- read.csv(file = file.,
skip = 2,
na.strings = "-")
virus_snc$mutation_rate <- gsub("E","e",
virus_snc$mutation_rate)
virus_snc$mutation_rate <- gsub(" ","",virus_snc$mutation_rate )
virus_snc$mutation_rate <- as.numeric(virus_snc$mutation_rate )
summary(virus_snc$mutation_rate )
usethis::use_data(virus_snc, overwrite = TRUE)
compbio4all::make_dateset_helpfile(dataset = virus_snc,
dataset_name = "virus_snc")
library(compbio4all)
library(compbio4all)
pkgdown::clean_site (pkg = ".")
devtools::clean_vignettes()
devtools::build_vignettes()
# https://www.uv.es/rsanjuan/Viral_mutation_rates_snc.txt
# Viral mutation rates can be expressed as
## substitutions per nucleotide site per cell infection (s/n/c)
## or as substitutions per nucleotide per strand copying (s/n/r).
## snc
## Viral mutation rates expressed as nucleotide substitutions per site per cell infection (s/n/c)
## https://www.uv.es/rsanjuan/Viral_mutation_rates_snc.htm
## snr
## Viral mutation rates expressed as nucleotide substitutions per site per strand copying (s/n/r)
## https://www.uv.es/rsanjuan/Viral_mutation_rates_snr.htm
file. <- here::here("data-raw","virus_mutation_rates_snr.csv")
virus_snr <- read.csv(file = file.,
skip = 2)
virus_snr$mutation_rate <- gsub("E","e",
virus_snr$mutation_rate)
virus_snr$mutation_rate <- gsub(" ","",virus_snr$mutation_rate )
virus_snr$mutation_rate <- as.numeric(virus_snr$mutation_rate )
summary(virus_snr$mutation_rate )
usethis::use_data(virus_snr, overwrite = TRUE)
compbio4all::make_dateset_helpfile(dataset = virus_snr,
dataset_name = "virus_snr")
#
# library(ggpubr)
# virus_snr$mutation_rate_log <- log(virus_snr$mutation_rate)
# virus_snr$genome_size_kb_log <- log(virus_snr$genome_size_kb)
#
# ggpubr::ggscatter(y = "mutation_rate_log",
#           x = "genome_size_kb_log",
#           data = virus_snr,
#           color = "group")
# snc
file. <- here::here("data-raw","virus_mutation_rates_snc.csv")
virus_snc <- read.csv(file = file.,
skip = 2,
na.strings = "-")
virus_snc$mutation_rate <- gsub("E","e",
virus_snc$mutation_rate)
virus_snc$mutation_rate <- gsub(" ","",virus_snc$mutation_rate )
virus_snc$mutation_rate <- as.numeric(virus_snc$mutation_rate )
summary(virus_snc$mutation_rate )
usethis::use_data(virus_snc, overwrite = TRUE)
# compbio4all::make_dateset_helpfile(dataset = virus_snc,
#                                    dataset_name = "virus_snc")
library(compbio4all)
# https://www.uv.es/rsanjuan/Viral_mutation_rates_snc.txt
# Viral mutation rates can be expressed as
## substitutions per nucleotide site per cell infection (s/n/c)
## or as substitutions per nucleotide per strand copying (s/n/r).
## snc
## Viral mutation rates expressed as nucleotide substitutions per site per cell infection (s/n/c)
## https://www.uv.es/rsanjuan/Viral_mutation_rates_snc.htm
## snr
## Viral mutation rates expressed as nucleotide substitutions per site per strand copying (s/n/r)
## https://www.uv.es/rsanjuan/Viral_mutation_rates_snr.htm
file. <- here::here("data-raw","virus_mutation_rates_snr.csv")
virus_snr <- read.csv(file = file.,
skip = 2)
virus_snr$mutation_rate <- gsub("E","e",
virus_snr$mutation_rate)
virus_snr$mutation_rate <- gsub(" ","",virus_snr$mutation_rate )
virus_snr$mutation_rate <- as.numeric(virus_snr$mutation_rate )
summary(virus_snr$mutation_rate )
usethis::use_data(virus_snr, overwrite = TRUE)
compbio4all::make_dateset_helpfile(dataset = virus_snr,
dataset_name = "virus_snr")
#
# library(ggpubr)
# virus_snr$mutation_rate_log <- log(virus_snr$mutation_rate)
# virus_snr$genome_size_kb_log <- log(virus_snr$genome_size_kb)
#
# ggpubr::ggscatter(y = "mutation_rate_log",
#           x = "genome_size_kb_log",
#           data = virus_snr,
#           color = "group")
# snc
file. <- here::here("data-raw","virus_mutation_rates_snc.csv")
virus_snc <- read.csv(file = file.,
skip = 2,
na.strings = "-")
virus_snc$mutation_rate <- gsub("E","e",
virus_snc$mutation_rate)
virus_snc$mutation_rate <- gsub(" ","",virus_snc$mutation_rate )
virus_snc$mutation_rate <- as.numeric(virus_snc$mutation_rate )
summary(virus_snc$mutation_rate )
usethis::use_data(virus_snc, overwrite = TRUE)
# compbio4all::make_dateset_helpfile(dataset = virus_snc,
#                                    dataset_name = "virus_snc")
library(compbio4all)
getwd()
library(compbio4all)
seqnames <- c("P06747",
"P0C569",
"O56773",
"Q5VKP1")
# get sequences
seq_1_2_3_4 <- entrez_fetch_list(db = "protein",
id = seqnames,
rettype = "fasta")
# clean sequences
seq_1_2_3_4[[1]] <- fasta_cleaner(seq_1_2_3_4[[1]])
seq_1_2_3_4[[2]] <- fasta_cleaner(seq_1_2_3_4[[2]])
seq_1_2_3_4[[3]] <- fasta_cleaner(seq_1_2_3_4[[3]])
seq_1_2_3_4[[4]] <- fasta_cleaner(seq_1_2_3_4[[4]])
# name the sequences
## NOTE: MUST be named in order for ggmsa to work!!!
seq_1_2_3_4_vector <- c(P06747 = paste(seq_1_2_3_4[[1]], collapse = ""),
P0C569 = paste(seq_1_2_3_4[[2]], collapse = ""),
O56773 = paste(seq_1_2_3_4[[3]], collapse = ""),
Q5VKP1 = paste(seq_1_2_3_4[[4]], collapse = ""))
# convert to AAStringSet
seq_1_2_3_4_stringset <- Biostrings::AAStringSet(seq_1_2_3_4_vector)
library(compbio4all)
# sequence accessions
seqnames <- c("P06747",
"P0C569",
"O56773",
"Q5VKP1")
# get sequences
seq_1_2_3_4 <- entrez_fetch_list(db = "protein",
id = seqnames,
rettype = "fasta")
# clean sequences
seq_1_2_3_4[[1]] <- fasta_cleaner(seq_1_2_3_4[[1]])
seq_1_2_3_4[[2]] <- fasta_cleaner(seq_1_2_3_4[[2]])
seq_1_2_3_4[[3]] <- fasta_cleaner(seq_1_2_3_4[[3]])
seq_1_2_3_4[[4]] <- fasta_cleaner(seq_1_2_3_4[[4]])
# name the sequences
## NOTE: MUST be named in order for ggmsa to work!!!
seq_1_2_3_4_vector <- c(P06747 = paste(seq_1_2_3_4[[1]], collapse = ""),
P0C569 = paste(seq_1_2_3_4[[2]], collapse = ""),
O56773 = paste(seq_1_2_3_4[[3]], collapse = ""),
Q5VKP1 = paste(seq_1_2_3_4[[4]], collapse = ""))
# convert to AAStringSet
seq_1_2_3_4_stringset <- Biostrings::AAStringSet(seq_1_2_3_4_vector)
virusaln <- msa(inputSeqs = seq_1_2_3_4_stringset,
method = "ClustalW")
class(virusaln) <- "AAMultipleAlignment"
# convert to seqinr format
virusaln_seqinr <- msaConvert(virusaln, type = "seqinr::alignment")
# clean poorl aligned sections
library(compbio4all)
virusaln_seqinr_clean <- clean_alignment(alignment = virusaln_seqinr,  # virusaln_seqinr
minpcnongap = 30,
minpcid = 30)
# make MSA
library(msa)
virusaln <- msa(inputSeqs = seq_1_2_3_4_stringset,
method = "ClustalW")
class(virusaln) <- "AAMultipleAlignment"
# convert to seqinr format
virusaln_seqinr <- msaConvert(virusaln, type = "seqinr::alignment")
# clean poorl aligned sections
library(compbio4all)
virusaln_seqinr_clean <- clean_alignment(alignment = virusaln_seqinr,  # virusaln_seqinr
minpcnongap = 30,
minpcid = 30)
usethis::use_data(seq_1_2_3_4, overwrite = TRUE)
## stringset
usethis::use_data(seq_1_2_3_4_stringset, overwrite = TRUE)
## alignments
usethis::use_data(virusaln, overwrite = TRUE)
usethis::use_data(virusaln_seqinr, overwrite = TRUE)
usethis::use_data(virusaln_seqinr_clean, overwrite = TRUE)
library(compbio4all)
library(compbio4all)
dist.alignment
# this function requires the ape and seqinR packages:
require("ape")
require("seqinr")
?dist.alignment
?nj
?as.DNAbin
?dist.dna
?makeLabel
?as.matrix.alignment
?makemytree
makemytree
?boot.phylo
?nodelabels
?plot.phylo
library(compbio4all)
# Part 2: mRNA
# put accession in vector
accessions_mrna <- c("AF049118","AF049114","AF049119","AF049115")
virus_mrna_list <- entrez_fetch_list(db = "nuccore",  # "nuccore" db for DNA
id = accessions_mrna,
rettype = "FASTA") # rettype has two t
for(i in 1:length(virus_mrna_list)){
virus_mrna_list[[i]] <- fasta_cleaner(virus_mrna_list[i],
parse = F)
}
mra_seq_vector <- c(AF049118 =  virus_mrna_list[[1]] ,
AF049114 = virus_mrna_list[[2]] ,
AF049119 = virus_mrna_list[[3]] ,
AF049115 = virus_mrna_list[[4]])
dna_seq_stringset <- Biostrings::DNAStringSet(mra_seq_vector)
virus_mrna_aln <- msa(inputSeqs = dna_seq_stringset,
method = "ClustalW")
## Calculationg genetic distance
# Convert the alignment to "DNAbin" format
virus_mrna_aln_bin <- ape::as.DNAbin(virus_mrna_aln)
# Calculate the genetic distance matrix
virus_mrna_dist <- ape::dist.dna(virus_mrna_aln_bin)
## make data
usethis::use_data(virus_mrna_dist, overwrite = TRUE)
usethis::use_data(virus_mrna_aln_bin, overwrite = TRUE)
usethis::use_data(virus_mrna_aln, overwrite = TRUE)
usethis::use_data(dna_seq_stringset, overwrite = TRUE)
?use_r
usethis::use_r("virus_mrna_dist")
usethis::use_r("virus_mrna_aln_bin")
usethis::use_r("virus_mrna_aln")
usethis::use_r("dna_seq_stringset")
library(compbio4all)
virus_mrna_dist
## make data file
usethis::use_data(virus_mrna_dist, overwrite = TRUE)
usethis::use_data(virus_mrna_aln_bin, overwrite = TRUE)
usethis::use_data(virus_mrna_aln, overwrite = TRUE)
usethis::use_data(dna_seq_stringset, overwrite = TRUE)
virus_mrna_aln_bin
library(compbio4all)
library(compbio4all)
library(compbio4all)
